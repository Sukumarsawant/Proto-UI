---
import LinkButton from './pattern/LinkButton.astro';
import { PAGE_TITLE_ID } from '../../constants';

const { data } = Astro.locals.starlightRoute.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
  if ('file' in image) {
    darkImage = image.file;
  } else if ('dark' in image) {
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawHtml = image.html;
  }
}
---

<section>
  <div class="container-wrapper">
    <div
      class="container flex flex-col items-center gap-2 py-8 text-center md:py-16 lg:py-20 xl:gap-4"
    >
      <a
        data-slot="badge"
        class="inline-flex items-center justify-center border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90 rounded-full"
        href="/contribute"
      >
        Contributors Wanted! <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-arrow-right"
          ><path d="M5 12h14"></path><path d="m12 5 7 7-7 7"></path></svg
        ></a
      >
      <h1
        class="text-primary leading-tighter text-4xl font-semibold tracking-tight text-balance lg:leading-[1.1] lg:font-semibold xl:text-5xl xl:tracking-tighter max-w-4xl"
        id={PAGE_TITLE_ID}
        data-page-title
        set:html={title}
      />
      {
        tagline && (
          <div
            class="text-foreground max-w-3xl text-base text-balance sm:text-lg"
            set:html={tagline}
          />
        )
      }

      {
        actions.length > 0 && (
          <div class="flex w-full items-center justify-center gap-2 pt-2 **:data-[slot=button]:shadow-none">
            {actions.map(
              ({ attrs: { class: className, ...attrs } = {}, icon, link: href, text, variant }) => (
                <LinkButton {href} {variant} class:list={[className]} {...attrs}>
                  {text}
                  {icon?.html && <Fragment set:html={icon.html} />}
                </LinkButton>
              )
            )}
          </div>
        )
      }
    </div>
  </div>
</section>

<style>
  @layer starlight.core {
    .hero {
      display: grid;
      align-items: center;
      gap: 1rem;
      padding-bottom: 1rem;
    }

    .hero > img,
    .hero > .hero-html {
      object-fit: contain;
      width: min(70%, 20rem);
      height: auto;
      margin-inline: auto;
    }

    .stack {
      flex-direction: column;
      gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
      text-align: center;
    }

    .copy {
      flex-direction: column;
      gap: 1rem;
      align-items: center;
    }

    .copy > * {
      max-width: 50ch;
    }

    h1 {
      font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 5vw), var(--sl-text-6xl));
      line-height: var(--sl-line-height-headings);
      font-weight: 600;
      color: var(--sl-color-white);
    }

    .tagline {
      font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
      color: var(--sl-color-gray-2);
    }

    .actions {
      gap: 1rem 2rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    @media (min-width: 50rem) {
      .hero {
        grid-template-columns: 7fr 4fr;
        gap: 3%;
        padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
      }

      .hero > img,
      .hero > .hero-html {
        order: 2;
        width: min(100%, 25rem);
      }

      .stack {
        text-align: start;
      }

      .copy {
        align-items: flex-start;
      }

      .actions {
        justify-content: flex-start;
      }
    }
  }
</style>
